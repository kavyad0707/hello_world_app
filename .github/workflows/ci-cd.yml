name: CI/CD - Build, Push to ECR, Deploy to ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY || 'hello-fargate' }}
  ECR_REPOSITORY_REGISTRY: ${{ vars.ECR_REPOSITORY_REGISTRY || 'test-hello-registry' }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER || 'my-ecs-cluster' }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE || 'my-ecs-service' }}
  ECS_TASKDEF_PATH: ${{ vars.ECS_TASKDEF_PATH || 'ecs/taskdef.json' }}
  ECS_CONTAINER_NAME: ${{ vars.ECS_CONTAINER_NAME || 'app' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        working-directory: app
        env:
          REGISTRY: ${{ env.ECR_REPOSITORY_REGISTRY }}
          REPO: ${{ env.ECR_REPOSITORY }}
        run: |
          IMAGE="${REGISTRY}/${REPO}"
          docker build -t "${IMAGE}:latest" .
          docker push "${IMAGE}:latest"

      - name: Render task definition for Amazon ECS
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASKDEF_PATH }}
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ needs.build-and-push.outputs.image }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}